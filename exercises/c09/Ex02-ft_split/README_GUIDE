# **ft_split String Splitter**

## **Overview**

This program takes a string and splits it into separate words based on a set of delimiters (characters specified by the user). The function `ft_split` returns an array of strings where each string is a portion of the original string, separated by one of the characters in the delimiter list. The array is terminated by a `NULL` pointer.

---

## **Code Breakdown**

### **1. Header Files**

```
#include <unistd.h>
#include <stdlib.h>
```

- `unistd.h`: Provides the `write` function, which is used to output characters directly to the standard output.
- `stdlib.h`: Provides the `malloc` and `free` functions used for dynamic memory allocation and deallocation.

### **2. `ft_putstr` Function**

```
void ft_putstr(char *str) {
    int i = 0;
    while (str[i] != '\0') {
        write(1, &str[i], 1);
        i++;
    }
}
```

- **Purpose**: This function takes a string (`char *str`) and prints it character by character using the `write` system call.
- **Concepts**:
  - `write`: A system call that outputs data to a file descriptor. Here, it writes to the standard output (`1`).
  - `while (str[i] != '\0')`: The loop continues until it reaches the null terminator, marking the end of the string.

### **3. `is_sep` Function**

```
int is_sep(char c, char *charset) {
    int i = 0;
    while (charset[i] != '\0') {
        if (c == charset[i]) {
            return 1;
        }
        i++;
    }
    return 0;
}
```

- **Purpose**: This function checks if a character `c` is present in the string of delimiters (`charset`). If the character is found, it returns `1`, otherwise it returns `0`.
- **Concepts**:
  - `char *charset`: A string containing the delimiters (characters that separate words).
  - **Character Comparison**: The loop iterates through the charset, comparing each character to `c`.

### **4. `ft_nofstrs` Function**

```
int ft_nofstrs(char *str, char *charset) {
    int counter = 0;
    int i = 0;

    while (str[i] != '\0') {
        while (str[i] != '\0' && is_sep(str[i], charset)) {
            i++;
        }
        if (str[i] != '\0') {
            counter++;
            while (str[i] != '\0' && !is_sep(str[i], charset)) {
                i++;
            }
        }
    }
    return counter;
}
```

- **Purpose**: This function counts how many words are in the input string `str`, based on the delimiters provided in `charset`.
- **Concepts**:
  - **Double Loop**: The first loop skips over all delimiters, and the second loop skips over non-delimiter characters (i.e., part of a word).
  - **`counter`**: Counts how many times the function encounters a word (a sequence of non-delimiter characters).

### **5. `ft_split` Function**

```
char **ft_split(char *str, char *charset) {
    char **arr;
    int size = ft_nofstrs(str, charset);
    int i = 0, j = 0, word_len = 0, p = 0;

    arr = (char **)malloc((size + 1) * sizeof(char *));
    if (!arr) {
        return NULL;
    }

    while (str[i] != '\0' && j < size) {
        while (str[i] != '\0' && is_sep(str[i], charset)) {
            i++;
        }
        word_len = 0;
        while (str[i + word_len] != '\0' && !is_sep(str[i + word_len], charset)) {
            word_len++;
        }
        if (word_len > 0) {
            arr[j] = (char *)malloc((word_len + 1) * sizeof(char));
            if (!arr[j]) {
                while (j >= 0) {
                    free(arr[--j]);
                }
                free(arr);
                return NULL;
            }
            p = 0;
            while (p < word_len) {
                arr[j][p] = str[i + p];
                p++;
            }
            arr[j][p] = '\0';
            j++;
        }
        i += word_len;
    }
    arr[j] = NULL;
    return arr;
}
```

- **Purpose**: The main function splits the input string `str` into an array of words, using the `charset` delimiters to separate them. The returned array contains pointers to each word, and the last element is `NULL`.
- **Concepts**:
  - **Dynamic Memory Allocation**:
    - `arr = (char **)malloc((size + 1) * sizeof(char *))`: Allocates memory for the array of strings. The `+1` accounts for the `NULL` terminator.
    - `arr[j] = (char *)malloc((word_len + 1) * sizeof(char))`: Allocates memory for each word, including space for the null terminator.
  - **Word Length Calculation**: The `word_len` variable counts the number of characters in each word.
  - **Memory Deallocation**:
    - If an allocation fails, the function frees all previously allocated memory before returning `NULL`.

### **6. `main` Function**

```
int main(void) {
    char *str = "apple,banana/tomato;melon'orange";
    char *charset = "',;|\\?/";
    char **r = ft_split(str, charset);
    int i = 0;

    if (r) {
        while (r[i] != NULL) {
            ft_putstr(r[i]);
            free(r[i]);
            write(1, "\n", 1);
            i++;
        }
        free(r);
    }
    return 0;
}
```

- **Purpose**: The `main` function tests the `ft_split` function by providing a string (`str`) and a set of delimiters (`charset`). It then prints each word and frees the memory allocated for the split strings.
- **Concepts**:
  - **Dynamic Memory Cleanup**: After using the strings, `free(r[i])` frees each word, and `free(r)` frees the array of pointers.

---

## **Key Concepts**

- **Dynamic Memory**: The `malloc` function is used to allocate memory during runtime. Each allocated memory block must be freed using `free` to avoid memory leaks.
  
- **System Calls**: `write` is a system call that writes bytes to the output. It is a lower-level function that directly interacts with the system's input/output.

- **String Parsing**: The `ft_split` function parses a string by detecting words between delimiters and copying them into dynamically allocated memory.

---

## **Compilation Instructions**

To compile this program with warnings enabled, you can use the following command:

```
gcc -Wall -Wextra -Werror -o ft_split ft_split.c
```

### Flags:
- **`-Wall`**: Enables all warnings about constructions that some users find questionable.
- **`-Wextra`**: Enables extra warning flags.
- **`-Werror`**: Treats all warnings as errors, forcing you to fix any issues.

### Running the Program

After compilation, run the program like this:

```
./ft_split
```

This will print the words split by the delimiters provided.

---

## **Examples**

Given the string:
```
str = "apple,banana/tomato;melon'orange";
charset = "',;|\\?/";
```

The output will be:

```
apple
banana
tomato
melon
orange

```

Each word is printed on a new line, separated by the delimiters provided in the `charset` string.

---
