
# README Guide for `ft_ultimate_range`

## Overview

This guide provides detailed instructions on the functionality, compilation, and testing of the `ft_ultimate_range` function, along with the complete code example. This function creates an array of integers containing all values between a range from a given minimum (`min`) to a maximum (`max`) value, with `min` included and `max` excluded. it returns the size of range.

## Code Explanation - Open the c file while reading!

### Function Definition:

#### `ft_ultimate_range`

**Prototype:**

```
int ft_ultimate_range(int **range, int min, int max);
```

**Parameters:**

- `range`: A double pointer to an integer (`int **`). This pointer will be used to store the address of the dynamically allocated array.
- `min`: An integer representing the minimum value to include in the range.
- `max`: An integer representing the maximum value (exclusive) to include in the range.

**Returns:**

- The size of the range array (number of elements) on success.
- `-1` if there is an error (e.g., memory allocation failure).
- `0` if `min` is greater than or equal to `max`, indicating no elements to include.

**Functionality:**

1. **Check Validity:**
   - If `min` is greater than or equal to `max`, set `*range` to `NULL` and return `0`.

2. **Allocate Memory:**
   - Calculate the size of the array as `max - min`.
   - Allocate memory for the array of integers. If memory allocation fails, return `-1`.

3. **Populate Array:**
   - Use a `while` loop to fill the array with values starting from `min` up to (but not including) `max`.

4. **Assign to Range Pointer:**
   - Set `*range` to point to the newly allocated array.
   - Return the number of elements in the array if successful.

### Main Function

**Purpose:**

- Demonstrates the usage of `ft_ultimate_range`.
- Sets example values for `min` and `max`.
- Calls `ft_ultimate_range` to get the range array.
- Handles different return values:
  - Prints `0` if the range size is `0`.
  - Prints `-` followed by the absolute value of the size if the size is negative.

**Steps:**

1. Define variables for `min`, `max`, and `range`.
2. Call `ft_ultimate_range` and store the return value in `n`.
3. Use `write` function to display the result in the terminal.

## Compilation and Testing:

### Compilation Instructions:

1. **Open Terminal:**
   - On Ubuntu, press `Ctrl + Alt + T` to open a terminal window.

2. **Navigate to Directory:**
   - Use the `cd` command to navigate to the directory containing your source code file (e.g., `main.c`). or right-click in the mouse while your are in the target directory and click "open in terminal".

   ```
   cd path/to/your/code
   
   ```

3. **Compile Code:**
   - Use `gcc` to compile the code with the necessary flags. The `-Wall`, `-Wextra`, and `-Werror` flags are used to enable compiler warnings and treat them as errors. Type this command in the terminal:

   ```
   gcc -Wall -Wextra -Werror -o ft_ultimate_range main.c
   
   ```

   - `-Wall`: Enables all the basic warning messages.
   - `-Wextra`: Enables extra warning messages.
   - `-Werror`: Treats warnings as errors, preventing the code from compiling if there are any warnings.

4. **Run the Program:**
   - Execute the compiled program using the following command:

   ```
   ./ft_ultimate_range
   
   ```

   - This will run the `main` function and display the output based on the `min` and `max` values provided.

### Example Output

- If `min = 3` and `max = 7`, the program will print `4`, as the range array will contain `[3, 4, 5, 6]`, which has 4 elements.

## Detailed Explanation of Double Pointer Usage

In the `ft_ultimate_range` function, a double pointer (`int **range`) is used to pass the address of the pointer that will point to the dynamically allocated array. 

- **Double Pointer (`int **`):** Allows the function to modify the original pointer(*range) in the caller’s(or main function's) scope (*range pointer inside main). By using `*range = arr`, the function updates the address stored in the `range` pointer to point to the newly allocated array.

**Steps:**

1. **Function Call:**
   - The caller passes the address of the pointer (`&range`) to `ft_ultimate_range`.

2. **Inside Function:**
   - The function allocates memory for the array and assigns the address to `*range`. This updates the pointer in the caller’s scope to point to the new array.

3. **Result:**
   - The caller now has access to the dynamically allocated array through the `range` pointer.

---
