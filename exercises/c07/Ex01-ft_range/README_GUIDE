### README Guide for `ft_range` Function

This guide provides a detailed explanation of the `ft_range` function and its usage. It covers the concepts involved, a comprehensive breakdown of the code, and instructions for compiling and testing it using the terminal.

---

## Overview

The `ft_range` function is designed to create an array of integers that contains all values starting from `min` (inclusive) up to, but not including, `max`. The `main` function demonstrates how to use `ft_range` and outputs the result to the terminal.

## Concepts Involved

### 1. Dynamic Memory Allocation
The function uses `malloc` to allocate memory dynamically for an array. This is essential for creating arrays whose size is determined at runtime.

### 2. Error Handling
Proper error handling is implemented to ensure that invalid input values and memory allocation failures are managed gracefully.

### 3. Array Initialization and Output
The function initializes the array with values in the specified range and demonstrates output handling through direct system calls, providing a low-level approach to displaying results.

## Detailed Code Explanation

### `ft_range` Function

```
int *ft_range(int min, int max) {
    int *arr;
    int i;
    int size;

    i = 0;

    // Check if min is greater than or equal to max
    if (min >= max) {
        return NULL; // Return NULL if invalid range
    }

    size = max - min; // Calculate the size of the array
    arr = (int *)malloc(size * sizeof(int)); // Allocate memory for the array

    // Check if memory allocation was successful
    if (arr == NULL) {
        return NULL; // Return NULL if memory allocation fails
    }

    // Initialize the array with values from min to max - 1
    while (i < size) {
        arr[i++] = min++; // Fill array with consecutive integers
    }

    return arr; // Return pointer to the allocated array
}
```

- **Parameters**:
  - `min`: The starting integer value (inclusive).
  - `max`: The ending integer value (exclusive).

- **Return Value**:
  - Returns a pointer to the allocated array containing integers from `min` to `max - 1`.
  
  - Returns `NULL` if `min` is greater than or equal to `max` or if memory allocation fails.

- **Detailed Process**:
  1. **Input Validation**:
     - If `min` is greater than or equal to `max`, the function returns `NULL` immediately, indicating that an array cannot be created with the given range.
     
  2. **Memory Allocation**:
     - The size of the array is computed as `max - min`. `malloc` allocates memory for this number of integers.
     - If memory allocation fails, `NULL` is returned.
     
  3. **Array Initialization**:
     - A `while` loop fills the array with integers starting from `min` and increments `min` on each iteration until the array is fully populated.
     
  4. **Return Value**:
     - The pointer to the beginning of the array is returned.

### `main` Function

```
int main(void) {
    int min;
    int max;
    int *n;
    int i;
    int j;
    int num;
    int size;
    char buffer[11];

    min = 3;
    max = 7;
    i = 0;
    j = 0;

    n = ft_range(min, max); // Call ft_range to get the array
    size = max - min; // Calculate the number of elements in the array

    while (i < size) {
        num = n[i]; // Get the current number from the array

        // Handle printing of the number
        if (num == 0) {
            write(1, "0", 1); // Special case for zero
        }

        if (num < 0) {
            write(1, "-", 1); // Print negative sign if number is negative
            num = -num; // Convert number to positive for further processing
        }

        // Convert number to string and print
        while (num > 0) {
            buffer[j++] = (num % 10) + '0'; // Store digits in reverse order
            num /= 10;
        }

        // Print the number in correct order
        while (j > 0) {
            write(1, &buffer[--j], 1); // Print each digit from the buffer
        }

        write(1, " ", 1); // Print space between numbers
        i++;
    }

    free(n); // Free the allocated memory
    return 0;
}
```

- **Variables**:
  - `min` and `max`: Define the range for the `ft_range` function.
  - `n`: Pointer to the array returned by `ft_range`.
  - `i`, `j`: Counters for iterating through the array and managing the buffer.
  - `num`: Current number from the array.
  - `size`: Number of elements in the array.
  - `buffer`: Character array used to convert integers to strings.

- **Detailed Process**:
  1. **Initialization**:
     - `min` and `max` are set to `3` and `7`, respectively.
     - The `ft_range` function is called to create an array with values from `min` to `max - 1`.
     - `size` is calculated as the difference between `max` and `min`.
  2. **Output Handling**:
     - Each number from the array is processed:
       - Special handling is applied to zero to ensure it prints correctly.
       - For negative numbers, a '-' is printed before converting the number to positive.
       - The number is converted to a string and printed in reverse order, with digits stored in `buffer` and printed from the end to the beginning.
       - Each number is followed by a space.
  3. **Memory Management**:
     - After processing and printing all numbers, the allocated memory is freed.

## Compilation and Testing Instructions

1. **Open Terminal**:
   - On Ubuntu: Press `Ctrl + Alt + T`.
   - On Windows: Open Command Prompt or PowerShell.

2. **Navigate to Your Project Directory**:
   ```
   cd path/to/your/project
   ```


3. **Compile the Code**:
   ```
   gcc -Wall -Wextra -Werror -o ft_range ft_range.c
   ```
   - `-Wall` enables all warnings.
   - `-Wextra` enables additional warnings.
   - `-Werror` treats warnings as errors.
   - `-o ft_range` specifies the output executable name.

4. **Run the Executable**:
   ```
   ./ft_range
   
   ```

5. **Verify Output**:
   - The output should display integers from `3` to `6`, separated by spaces (e.g., `3 4 5 6 `).

6. **Clean Up**:
   - Delete the executable if needed:
     ```
     rm ft_range
     ```

## Notes

- Ensure you have `gcc` installed on your system. Install it using `sudo apt install gcc` on Ubuntu if it's not already installed.

